/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/

import {
    AbstractExecuteCommandHandler,
    AstNode,
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject, EmptyFileSystem, ExecuteCommandAcceptor,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices
} from 'langium';
import { Statemachine } from './generated/ast';
import { StatemachineGeneratedModule, StatemachineGeneratedSharedModule } from './generated/module';
import { StatemachineValidationRegistry, StatemachineValidator } from './statemachine-validator';
import { URI } from 'vscode-uri';
import { generateCpp } from '../cli/generator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type StatemachineAddedServices = {
    validation: {
        StatemachineValidator: StatemachineValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type StatemachineServices = LangiumServices & StatemachineAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const StatemachineModule: Module<StatemachineServices, PartialLangiumServices & StatemachineAddedServices> = {
    validation: {
        ValidationRegistry: (services) => new StatemachineValidationRegistry(services),
        StatemachineValidator: () => new StatemachineValidator()
    }
};

/**
 * Parses a concrete state machine program & produces a generated result
 * @param statemachineProgram Concrete statemachine program to parse & generate from
 * @returns A generated output, suitable for passing in an LSP custom command's response
 */
export async function parseAndGenerate(statemachineProgram: string): Promise<string> {
    const services = createStatemachineServices(EmptyFileSystem).statemachine;
    const statemachine = await extractAstNodeFromString<Statemachine>(statemachineProgram, services);
    const cppData = generateCpp(statemachine);
    return Promise.resolve(cppData);
}

class StatemachineCommandHandler extends AbstractExecuteCommandHandler {
    registerCommands(acceptor: ExecuteCommandAcceptor): void {
        // register 'parseAndGenerate' command, accepts a single program arg as a string
        acceptor('parseAndGenerate', args => {
            return parseAndGenerate(args[0]);
        });
    }
}

/**
 * Extracts an AST node from a virtual document, represented as a string
 * @param content Content to create virtual document from
 * @param services For constructing & building a virtual document
 * @returns A promise for the parsed result of the document
 */
async function extractAstNodeFromString<T extends AstNode>(content: string, services: LangiumServices): Promise<T> {
    const doc = services.shared.workspace.LangiumDocumentFactory.fromString(content, URI.parse('memory://minilogo.document'));
    await services.shared.workspace.DocumentBuilder.build([doc], { validationChecks: 'all' });
    return doc.parseResult?.value as T;
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createStatemachineServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    statemachine: StatemachineServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        StatemachineGeneratedSharedModule
    );
    const statemachine = inject(
        createDefaultModule({ shared }),
        StatemachineGeneratedModule,
        StatemachineModule
    );
    // simply register the handler here
    shared.lsp.ExecuteCommandHandler = new StatemachineCommandHandler();
    shared.ServiceRegistry.register(statemachine);
    return { shared, statemachine };
}
